version: 2
jobs:
  deploy_dev:
    working_directory: /workspace
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - run:
          name: Setup gcloud & kubectl
          command: |
            echo $GCP_SERVICE_ACCOUNT_DEV | base64 --decode --ignore-garbage > /root/gcloud-service-key.json
            gcloud auth activate-service-account --key-file /root/gcloud-service-key.json            
            gcloud --quiet config set project $GKE_PROJECT_DEV
            gcloud --quiet config set compute/zone $GKE_ZONE_DEV
            gcloud --quiet container clusters get-credentials $GKE_CLUSTER 
      - run:
          name: Deploy Letsencrypt
          command: |
            kubectl get clusterrolebinding | grep cluster-admin-binding-ci || kubectl create clusterrolebinding cluster-admin-binding-ci --clusterrole cluster-admin --user $(gcloud config get-value account)
            kubectl apply -f /workspace/deployment/gcp-dev/gke/tls/00-namespace.yaml
            kubectl apply -f /workspace/deployment/gcp-dev/gke/tls/serviceaccount.yaml
            kubectl apply -f /workspace/deployment/gcp-dev/gke/tls/clusterissuer-crd.yaml
            kubectl apply -f /workspace/deployment/gcp-dev/gke/tls/certificate-crd.yaml
            kubectl apply -f /workspace/deployment/gcp-dev/gke/tls/issuer-crd.yaml
            kubectl apply -f /workspace/deployment/gcp-dev/gke/tls/rbac.yaml
            kubectl apply -f /workspace/deployment/gcp-dev/gke/tls/deployment.yaml
            kubectl apply -f /workspace/deployment/gcp-dev/gke/tls/acme-issuer.yaml

      - run:
          name: Deploy Ingress GKE
          command: |
            #kubectl apply -f /workspace/deployment/gcp-dev/gke/tls/tpi-dev-acme-cert.yaml
            #gcloud compute addresses create ip-web-main --global || echo "already IP ip-web-main"
            kubectl apply -f /workspace/deployment/gcp-dev/gke/ingress-web-main.yml
      - run:
          name: Deploy Events Source Persistence
          command: |
            kubectl apply -f /workspace/deployment/gcp-dev/gke/gcloud-ssd-eventsSource.yaml
            kubectl apply -f /workspace/deployment/gcp-dev/gke/mongo-statefulset-eventsSource.yaml
            for xi in $(seq 0 10); do kubectl get pod | grep dbevents-0 | grep Running && break; sleep 5; done
            kubectl exec dbevents-0 -- mongo --host dbevents-0.dbevents --port 27017  --eval "rs.conf()" || \
            kubectl exec dbevents-0 -- mongo --host dbevents-0.dbevents --port 27017  --eval  "rs.initiate({ _id : \"rs0\", members: [{ _id: 0, host: \"dbevents-0.dbevents:27017\" },{ _id: 1, host: \"dbevents-1.dbevents:27017\" },{ _id: 2, host: \"dbevents-2.dbevents:27017\" }]})"
      - run:
          name: Deploy EMQX cluster
          command: |
            kubectl get clusterrolebinding | grep cluster-admin-binding-ci || kubectl create clusterrolebinding cluster-admin-binding-ci --clusterrole cluster-admin --user $(gcloud config get-value account)
            kubectl apply -f /workspace/deployment/gcp-dev/gke/nginx-ingress/mandatory.yaml


            gcloud compute addresses create nginx-ingress-mqtt --region $GKE_REGION_DEV || echo "already IP nginx-ingress-mqtt "
            IPP="$(gcloud compute addresses describe nginx-ingress-mqtt --region $GKE_REGION_DEV | grep "address:" | cut -d" " -f2)"; sed s/IP_LB/$IPP/ /workspace/deployment/gcp-dev/gke/nginx-ingress/cloud-generic.yaml > /tmp/cloud-generic.yaml
            kubectl apply -f /tmp/cloud-generic.yaml

            kubectl create clusterrolebinding service-reader-pod --clusterrole=view --serviceaccount=default:default || echo "already service role VIEW"
            kubectl apply -f /workspace/deployment/gcp-dev/gke/emqx-cluster.yaml
            kubectl apply -f /workspace/deployment/gcp-dev/gke/ingress-mqtt.yml

  deploy_prod:
    working_directory: /workspace
    docker:
      - image: google/cloud-sdk:latest
    steps:
      - checkout
      - run:
          name: Setup gcloud & kubectl
          command: |
            echo $GCP_SERVICE_ACCOUNT_PROD | base64 --decode --ignore-garbage > /root/gcloud-service-key.json
            gcloud auth activate-service-account --key-file /root/gcloud-service-key.json            
            gcloud --quiet config set project $GKE_PROJECT_PROD
            gcloud --quiet config set compute/zone $GKE_ZONE_PROD
            gcloud --quiet container clusters get-credentials $GKE_CLUSTER 
      - run:
          name: Deploy Letsencrypt
          command: |
            kubectl get clusterrolebinding | grep cluster-admin-binding-ci || kubectl create clusterrolebinding cluster-admin-binding-ci --clusterrole cluster-admin --user $(gcloud config get-value account)
            kubectl apply -f /workspace/deployment/gcp-prod/gke/tls/00-namespace.yaml
            kubectl apply -f /workspace/deployment/gcp-prod/gke/tls/serviceaccount.yaml
            kubectl apply -f /workspace/deployment/gcp-prod/gke/tls/clusterissuer-crd.yaml
            kubectl apply -f /workspace/deployment/gcp-prod/gke/tls/certificate-crd.yaml
            kubectl apply -f /workspace/deployment/gcp-prod/gke/tls/issuer-crd.yaml
            kubectl apply -f /workspace/deployment/gcp-prod/gke/tls/rbac.yaml
            kubectl apply -f /workspace/deployment/gcp-prod/gke/tls/deployment.yaml
            kubectl apply -f /workspace/deployment/gcp-prod/gke/tls/acme-issuer.yaml

      - run:
          name: Deploy Ingress MAIN GKE
          command: |
            #kubectl apply -f /workspace/deployment/gcp-prod/gke/tls/tpi-prod-acme-cert.yaml
            #gcloud compute addresses create ip-web-main --global || echo "already IP ip-web-main"
            kubectl apply -f /workspace/deployment/gcp-prod/gke/ingress-web-main.yml
      - run:
          name: Deploy Ingress TXPLUX GKE
          command: |
            #gcloud compute addresses create ip-txplux --global || echo "already IP ip-txplux"
            kubectl apply -f /workspace/deployment/gcp-prod/gke/ingress-txplux.yml
      - run:
          name: Deploy Events Source Persistence
          command: |
            kubectl apply -f /workspace/deployment/gcp-prod/gke/gcloud-ssd-eventsSource.yaml
            kubectl apply -f /workspace/deployment/gcp-prod/gke/mongo-statefulset-eventsSource.yaml
            for xi in $(seq 0 10); do kubectl get pod | grep dbevents-0 | grep Running && break; sleep 5; done
            kubectl exec dbevents-0 -- mongo --host dbevents-0.dbevents --port 27017  --eval "rs.conf()" || \
            kubectl exec dbevents-0 -- mongo --host dbevents-0.dbevents --port 27017  --eval  "rs.initiate({ _id : \"rs0\", members: [{ _id: 0, host: \"dbevents-0.dbevents:27017\" },{ _id: 1, host: \"dbevents-1.dbevents:27017\" },{ _id: 2, host: \"dbevents-2.dbevents:27017\" }]})"
      - run:
          name: Deploy EMQX cluster
          command: |
            kubectl get clusterrolebinding | grep cluster-admin-binding-ci || kubectl create clusterrolebinding cluster-admin-binding-ci --clusterrole cluster-admin --user $(gcloud config get-value account)
            kubectl apply -f /workspace/deployment/gcp-prod/gke/nginx-ingress/mandatory.yaml

            gcloud compute addresses create nginx-ingress-mqtt --region $GKE_REGION_PROD || echo "already IP nginx-ingress-mqtt"
            IPP="$(gcloud compute addresses describe nginx-ingress-mqtt --region $GKE_REGION_PROD | grep "address:" | cut -d" " -f2)"; sed s/IP_LB/$IPP/ /workspace/deployment/gcp-prod/gke/nginx-ingress/cloud-generic.yaml > /tmp/cloud-generic.yaml
            kubectl apply -f /tmp/cloud-generic.yaml

            kubectl create clusterrolebinding service-reader-pod --clusterrole=view --serviceaccount=default:default || echo "already service role VIEW"
            kubectl apply -f /workspace/deployment/gcp-prod/gke/emqx-cluster.yaml
            kubectl apply -f /workspace/deployment/gcp-prod/gke/ingress-mqtt.yml

# ################ SCHEDULE DEPLOY ################ 

  deploy-schedule-develop-on:
      working_directory: ~/nebulae/
      docker:
        - image: google/cloud-sdk:latest
      steps:
        - checkout
        - run:
            name: Setup gcloud & kubectl
            command: |
              echo $GCP_SERVICE_ACCOUNT_DEV | base64 --decode --ignore-garbage > /root/gcloud-service-key.json
              gcloud auth activate-service-account --key-file /root/gcloud-service-key.json            
              gcloud --quiet config set project $GKE_PROJECT_DEV
              gcloud --quiet config set compute/zone $GKE_ZONE_DEV
              gcloud --quiet container clusters get-credentials $GKE_CLUSTER 
        - run:
            name: resize gcloud development environment
            command: |
              export VAR1=$(gcloud compute instance-groups list --project $GKE_PROJECT_DEV | grep $GKE_CLUSTER-pool-1 | awk "{ print \$6 }")
              [[ $VAR1 -lt 3 ]] && gcloud container clusters resize $GKE_CLUSTER --size=3 --node-pool pool-1 --project $GKE_PROJECT_DEV --quiet; export VAR2=0 || export VAR2=1
              [[ $VAR2 -eq 0 ]] && sleep 180 || echo "dont resize"
              [[ $VAR2 -eq 0 ]] && for xi in $(kubectl get deploy | grep -v "^NAME" | awk "{ print \$1}"); do kubectl scale deploy/$xi --replicas=1; done || echo "dont resize"

  deploy-schedule-develop-off:
      working_directory: ~/nebulae/
      docker:
        - image: google/cloud-sdk:latest
      steps:
        - checkout
        - run:
            name: Setup gcloud
            command: |
              echo $GCP_SERVICE_ACCOUNT_DEV | base64 --decode --ignore-garbage > /root/gcloud-service-key.json
              gcloud auth activate-service-account --key-file /root/gcloud-service-key.json            
              gcloud --quiet config set project $GKE_PROJECT_DEV
              gcloud --quiet config set compute/zone $GKE_ZONE_DEV
              gcloud --quiet container clusters get-credentials $GKE_CLUSTER 
        - run:
            name: down off cluster development environment
            command: |
              export VAR1=$(gcloud compute instance-groups list --project $GKE_PROJECT_DEV | grep $GKE_CLUSTER-pool-1 | awk "{ print \$6 }")
              [[ $VAR1 -gt 0 ]] && for xi in $(kubectl get deploy | grep -v "^NAME" | awk "{ print \$1}"); do kubectl scale deploy/$xi --replicas=0; done; export VAR2=0 || export VAR2=1
              [[ $VAR2 -eq 0 ]] && sleep 90 || echo "dont resize"
              [[ $VAR1 -gt 0 ]] && gcloud container clusters resize $GKE_CLUSTER --size=0 --node-pool pool-1 --project $GKE_PROJECT_DEV --quiet || echo "cluster size: $VAR1"

workflows: 
  version: 2
  schedule-develop-on:
    triggers:
      - schedule:
          cron: "30 12 * 1 1-5"
          filters:
            branches:
              only:
                - develop
    jobs:
      - deploy-schedule-develop-on:
          context: TPI

  schedule-develop-off:
    triggers:
      - schedule:
          cron: "38 23 * * *"
          filters:
            branches:
              only:
                - develop
    jobs:
      - deploy-schedule-develop-off:
          context: TPI

  deploy:
    jobs:
      - deploy_dev:
          context: TPI
          filters:
            branches:
              only:
                - develop
      - deploy_prod:
          context: TPI
          filters:
            branches:
              only:
                - master
